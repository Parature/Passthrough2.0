

package yourNamespace.parature;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * A ParatureAPI object implements server side logic for accessing Parature accounts via 
 * a single sign on experience from the MyTCC portal to Parature using the 
 * Parature Passthrough 2.0 protocol, mandatory as of February 28, 2015. 
 * 
 * For a detailed description of the revised process go to: 
 * https://github.com/Parature/Passthrough2.0/blob/master/Hands%20on%20guide%20to%20help%20you%20get%20migrated%20to%20the%20new%20passthrough.docx
 * 
 * @author Rebecca Fountain Feb. 2015
 * @version Parature PassThrough 2.0
 **/
public class ParatureAPI {

  
  private String SecurePassThroughPingFedInstanceID = "";
 
  private ConfigParatureBean ParatureConfig;
  private ConfigResourceBean MainConfig;
  private DatabaseResourceBean DBConfig;
  private String FName,LName,SLAName,SessEmail,SessID,Email,SID,Task,DeptID,SSOAuthHost,RefID;
  private static Log log = LogFactory.getLog(ParatureAPI.class.getName());
  private static final String  DROP_OFF_URL = "https://sso-mutual-auth.parature.com/ext/ref/dropoff";

  /**
   * Initialize the Parature API
   **/
  public ParatureAPI(ConfigParatureBean config,ConfigResourceBean mainconfig,DatabaseResourceBean DBConfig) {
       
        
        SecurePassThroughPingFedInstanceID = 'YourPassthroughInstanceIDWeSharedWithYou";
        DeptID = "1234"; //your Department ID
        
        SessEmail = "AnyActiveParatureCSR@yourCompany.com";
  }

  
  
  /**
   * Handles Step One of the Parature PassThrough 2.0 process. 
   * Sends a post request that includes a unique ID assigned to TCC by Parature, 
   * select attributes of the current session's user, and reference to a pre-registered 
   * signed CA X509 certificate (*.tacomacc.edu) over a secure SSL connection. 
   * @return Upon success, a RefID which is needed to complete step two of the authentication process.
   **/
    public String GetSecurePassThroughRefID(String cFname, String cLname, String cEmail, String SID)
  {
      //Create body of the POST method. 
      StringBuilder payload = new StringBuilder();
      payload.append("{");
      payload.append("\"subject\":\"").append(SecurePassThroughPingFedInstanceID).append("\",");
      payload.append("\"payload\":{");
      payload.append("\"sessEmail\":\"").append(SessEmail).append("\",");
      payload.append("\"cFname\":\"").append(cFname).append("\",");
      payload.append("\"cLname\":\"").append(cLname).append("\",");
      payload.append("\"cEmail\":\"").append(cEmail).append("\",");
      payload.append("\"cStatus\":\" REGISTERED\",");
      payload.append("\"cUname\":\"").append(SID).append("\",");
      payload.append("\"cTou\":\"1\",");
      payload.append("\"deptID\":\"").append(DeptID).append("\","); 
      payload.append("}");
      payload.append("}");
     
      /**
       * SSO mutual drop off location confirms validitiy of the provided X509 
       * cert passed during a POST and provides a RefID in response. Account 
       * data is not checked until step two. A RefID will be provided even if 
       * incorrect or insufficient account info is sent in the POSTto the mutual drop off location. 
       * */
      String dropOffURL = "https://sso-mutual-auth.parature.com/ext/ref/dropoff";
      
      /**
       * Step One of the Passthrough 2.0 process requires a CA X509 certificate be included in the POST 
       * request to the mutual drop off URL.
       * */
      
      //Read in java key store file (.jks extension) and load into KeyStore object. 
      KeyStore ks = null;    
      FileInputStream certInStream = null;
        try {
            ks = KeyStore.getInstance("JKS");
        } catch (KeyStoreException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            certInStream = new FileInputStream("C:/CSRs/TCC1419CERT.jks");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        //Get and store password needed to load the java key store file. 
        FileInputStream jksloadCredentials = null;
        BufferedReader  br = null;
        String credentials = "";
        try {
            //For security purposes, the private key credentials are not stored in the project files. 
            //Instead they are stored in a highly protected folder on the server. 
             jksloadCredentials = new FileInputStream("C:/CSRs/jksLoad.txt");
             br = new BufferedReader(new InputStreamReader(jksloadCredentials));             
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            credentials = br.readLine();
        } catch (IOException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        char[] pw = credentials.toCharArray();
        
        // Load the .jks cert file
        try {
            ks.load(certInStream, pw);
            log.debug("Key store loaded...");
        } catch (IOException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CertificateException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }

       /**
        * Create a KeyManagerFactory initialized with the above defined KeyStore. 
        * This is responsible for securely using the default key management algorithm for use by secure sockets. 
        * */
       KeyManagerFactory kmf = null ;
        try {
            kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            kmf.init(ks, pw);
        } catch (KeyStoreException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnrecoverableKeyException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /**
         * Define the SSLContext and create a SSL Socket Factory in order to 
         * create a secure SSL socket. Note that the SSLContext is initialized with 
         * reference to the above defined KeyManager. 
         * Upon requests from a client (in this case the mutual drop off URL)
         * SSL socket uses the configured KeyManager to provide the signed certificate. 
         * This is different than in other languages where the certificate is explicitly 
         * related to the POST request. 
         */
        SSLContext sslContext = null;
        try {
            sslContext = SSLContext.getInstance("TLS");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sslContext.init(kmf.getKeyManagers(), null, null);
            SSLContext.setDefault(sslContext);
            log.debug("SSL Context configured...");
        } catch (KeyManagementException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        }
        SSLSocketFactory factory = sslContext.getSocketFactory();
        SSLSocket socket = null;
        try {
            socket =(SSLSocket)factory.createSocket(SSOAuthHost, 443);
            log.debug("Secure SSL socket created...");
        } catch (IOException ex) {
            Logger.getLogger(ParatureAPI.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        /**
         * Create and configure an HttpClient to execute a request to the DropOffURL 
         * and get the RefID response. Although not explicit in the code, the client will 
         * use the above defined SSL socket for the connection. 
         */
        HttpClient client = new HttpClient();
        client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);
        PostMethod postReq = new PostMethod(dropOffURL);
         try {
             postReq.setRequestHeader("Content-Type","text/plain");
             postReq.setRequestHeader("ping.instanceId", SecurePassThroughPingFedInstanceID );
             postReq.setRequestBody(payload.toString());
             int executeResponse = client.executeMethod(postReq);
             log.info("Payload.toString() = " + payload.toString());
             log.debug("Execute response = " + executeResponse);
             log.debug("request status:" + postReq.getStatusCode() + postReq.getStatusLine() + postReq.getStatusText());
             String response = postReq.getResponseBodyAsString();
             log.debug("Response = " + response);
             RefID = response.substring(8, 68);
             log.info("RefId value = " + RefID);

         }
         catch(Exception ex)
         {
             log.error("Unable to create user:"+Email+" reason:"+ex.getMessage()+" URL:"+dropOffURL);
             return null;
         }
     
     return RefID;    
  }
  
  private String MD5Hash(String input)
  {
       try {
          String ConcatString = input;
          byte[] defaultBytes = ConcatString.getBytes();
          MessageDigest algorithm = MessageDigest.getInstance("MD5");
          algorithm.reset();
          algorithm.update(defaultBytes);
          byte messageDigest[] = algorithm.digest();
          String outstring = new String(Hex.encodeHex(messageDigest));
          return outstring;
      }
      catch(Exception ex)
      {
          log.error("Error generating hash:"+ex.getMessage());
          return null;
      }
  }

  private String HashSLA(String SLA)
  {
       return MD5Hash(SLA);
  }

  
}
